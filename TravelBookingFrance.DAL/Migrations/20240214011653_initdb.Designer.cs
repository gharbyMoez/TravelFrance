// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelBookingFrance.DAL.DataContext;

#nullable disable

namespace TravelBookingFrance.DAL.Migrations
{
    [DbContext(typeof(DataAppContext))]
    [Migration("20240214011653_initdb")]
    partial class initdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.Activite", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Durée")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lieu")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Prix")
                        .HasColumnType("TEXT");

                    b.Property<string>("UrlImageAct")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            ActivityId = 1,
                            Durée = 3,
                            Lieu = "activite 1",
                            Nom = "activite 1",
                            Prix = 500m,
                            UrlImageAct = "activite 1"
                        },
                        new
                        {
                            ActivityId = 2,
                            Durée = 3,
                            Lieu = "activite 1",
                            Nom = "activite 1",
                            Prix = 500m,
                            UrlImageAct = "activite 1"
                        },
                        new
                        {
                            ActivityId = 3,
                            Durée = 3,
                            Lieu = "activite 1",
                            Nom = "activite 1",
                            Prix = 500m,
                            UrlImageAct = "activite 1"
                        },
                        new
                        {
                            ActivityId = 4,
                            Durée = 3,
                            Lieu = "activite 1",
                            Nom = "activite 1",
                            Prix = 500m,
                            UrlImageAct = "activite 1"
                        },
                        new
                        {
                            ActivityId = 5,
                            Durée = 3,
                            Lieu = "activite 1",
                            Nom = "activite 1",
                            Prix = 500m,
                            UrlImageAct = "activite 1"
                        });
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.Customer", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("BusPhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("HomePhone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Postal")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prov")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "Astra.BellaVita",
                            BusPhone = "5588774123",
                            City = "Monaco",
                            Country = "France",
                            Email = "johndoe@gmail.com",
                            HomePhone = "998123445855",
                            Name = "John",
                            Password = "123",
                            Postal = "1234444",
                            Prov = "Paris",
                            Surname = "Doe",
                            Username = "johndoe"
                        },
                        new
                        {
                            UserId = 5,
                            Address = "Astra.BellaVita",
                            BusPhone = "5588774123",
                            City = "Alexandria",
                            Country = "France",
                            Email = "Alex@gmail.com",
                            HomePhone = "8555474123",
                            Name = "Alex",
                            Password = "123",
                            Postal = "554123",
                            Prov = "Egypte",
                            Surname = "Martin",
                            Username = "Alex Martin"
                        },
                        new
                        {
                            UserId = 2,
                            Address = "Astra.BellaVita",
                            BusPhone = "5588774123",
                            City = "Alexandria",
                            Country = "France",
                            Email = "Rachelle.duboit@gmail.com",
                            HomePhone = "5585474123",
                            Name = "Rachelle",
                            Password = "123",
                            Postal = "885885123",
                            Prov = "Egypte",
                            Surname = "duboit",
                            Username = "Rachelle duboit"
                        },
                        new
                        {
                            UserId = 3,
                            Address = "Astra.BellaVita",
                            BusPhone = "5588774123",
                            City = "Alexandria",
                            Country = "France",
                            Email = "Franc.Foureaux@gmail.com",
                            HomePhone = "5585474123",
                            Name = "Franc",
                            Password = "123",
                            Postal = "885885123",
                            Prov = "Egypte",
                            Surname = "Foureaux",
                            Username = "Franc Foureaux"
                        },
                        new
                        {
                            UserId = 4,
                            Address = "Astra.BellaVita",
                            BusPhone = "5588774123",
                            City = "123",
                            Country = "France",
                            Email = "marcell.million@gmail.com",
                            HomePhone = "123",
                            Name = "marcell",
                            Password = "123",
                            Postal = "123",
                            Prov = "",
                            Surname = "million",
                            Username = "marcell million"
                        });
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfArrival")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfDepart")
                        .HasColumnType("TEXT");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FlightId");

                    b.ToTable("Vol");

                    b.HasData(
                        new
                        {
                            FlightId = 1,
                            CompanyName = "TUNISAIR",
                            DateOfArrival = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDepart = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightNumber = "ABC123",
                            SeatNumber = "12A"
                        },
                        new
                        {
                            FlightId = 2,
                            CompanyName = "AIRFRANCE",
                            DateOfArrival = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDepart = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightNumber = "ABC123",
                            SeatNumber = "12A"
                        },
                        new
                        {
                            FlightId = 3,
                            CompanyName = "TUNISAIR",
                            DateOfArrival = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDepart = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightNumber = "ABC123",
                            SeatNumber = "12A"
                        },
                        new
                        {
                            FlightId = 4,
                            CompanyName = "TUNISAIR",
                            DateOfArrival = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDepart = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightNumber = "ABC123",
                            SeatNumber = "12A"
                        },
                        new
                        {
                            FlightId = 5,
                            CompanyName = "AIRFRANCE",
                            DateOfArrival = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfDepart = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FlightNumber = "ABC123",
                            SeatNumber = "12A"
                        });
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PhotoId");

                    b.HasIndex("ProductId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            PhotoId = 1,
                            ProductId = 1,
                            Url = "car1.jpeg"
                        },
                        new
                        {
                            PhotoId = 2,
                            ProductId = 1,
                            Url = "car2.jpeg"
                        },
                        new
                        {
                            PhotoId = 3,
                            ProductId = 1,
                            Url = "car3.jpeg"
                        },
                        new
                        {
                            PhotoId = 4,
                            ProductId = 1,
                            Url = "car4.jpeg"
                        });
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.Product", b =>
                {
                    b.Property<int>("ProdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProdDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProdName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProdId");

                    b.ToTable("Produit");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.TActivity", b =>
                {
                    b.Property<int>("TravelActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TravelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TravelActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("TravelId");

                    b.ToTable("TActivities");

                    b.HasData(
                        new
                        {
                            TravelActivityId = 1,
                            ActivityId = 1,
                            TravelId = 1
                        },
                        new
                        {
                            TravelActivityId = 2,
                            ActivityId = 2,
                            TravelId = 1
                        },
                        new
                        {
                            TravelActivityId = 3,
                            ActivityId = 3,
                            TravelId = 1
                        });
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.Travel", b =>
                {
                    b.Property<int>("TravelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DepartureAirport")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DepartureDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("FlightId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Prix")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TravelDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TravelName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TripTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UrlTravelImage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TravelId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FlightId");

                    b.HasIndex("TripTypeId");

                    b.ToTable("DossierVoyage");

                    b.HasData(
                        new
                        {
                            TravelId = 1,
                            CustomerId = 1,
                            DepartureAirport = "Paris aeroport",
                            DepartureDate = "2024-02-15T00:00:00",
                            Destination = "Maghreb",
                            FlightId = 1,
                            Prix = 0,
                            TravelDate = "2024-01-10T00:00:00",
                            TravelName = "Marrakech_sejour",
                            TripTypeId = 1,
                            UrlTravelImage = "destination-5.jpg"
                        },
                        new
                        {
                            TravelId = 2,
                            CustomerId = 1,
                            DepartureAirport = "Paris aeroport",
                            DepartureDate = "2024-02-15T00:00:00",
                            Destination = "Tunis",
                            FlightId = 2,
                            Prix = 0,
                            TravelDate = "2024-01-10T00:00:00",
                            TravelName = "Tunis_Séjour",
                            TripTypeId = 1,
                            UrlTravelImage = "destination-4.jpg"
                        },
                        new
                        {
                            TravelId = 3,
                            CustomerId = 3,
                            DepartureAirport = "Paris aeroport",
                            DepartureDate = "2024-02-15T00:00:00",
                            Destination = "Espagne",
                            FlightId = 3,
                            Prix = 0,
                            TravelDate = "2024-02-10T00:00:00",
                            TravelName = "Barcelone_Sejour",
                            TripTypeId = 1,
                            UrlTravelImage = "destination-3.jpg"
                        },
                        new
                        {
                            TravelId = 4,
                            CustomerId = 1,
                            DepartureAirport = "Paris aeroport",
                            DepartureDate = "2024-02-15T00:00:00",
                            Destination = "Egypte",
                            FlightId = 4,
                            Prix = 0,
                            TravelDate = "2024-02-10T00:00:00",
                            TravelName = "Cairo_Sejour",
                            TripTypeId = 1,
                            UrlTravelImage = "destination-2.jpg"
                        },
                        new
                        {
                            TravelId = 5,
                            CustomerId = 1,
                            DepartureAirport = "Paris aeroport",
                            DepartureDate = "2024-02-15T00:00:00",
                            Destination = "Manhatan",
                            FlightId = 1,
                            Prix = 0,
                            TravelDate = "2024-02-10T00:00:00",
                            TravelName = "Manhatan_Sejour",
                            TripTypeId = 1,
                            UrlTravelImage = "destination-1.jpg"
                        });
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.TravelProduct", b =>
                {
                    b.Property<int>("TravelProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TravelId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TravelProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TravelId");

                    b.ToTable("TravelProduct");

                    b.HasData(
                        new
                        {
                            TravelProductId = 1,
                            ProductId = 1,
                            TravelId = 1
                        },
                        new
                        {
                            TravelProductId = 2,
                            ProductId = 3,
                            TravelId = 1
                        },
                        new
                        {
                            TravelProductId = 3,
                            ProductId = 2,
                            TravelId = 1
                        });
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.TripType", b =>
                {
                    b.Property<int>("TtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TtDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ttname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TtId");

                    b.ToTable("TripType");

                    b.HasData(
                        new
                        {
                            TtId = 1,
                            TtDescription = "Description of the trip Business",
                            Ttname = "Trip Business"
                        },
                        new
                        {
                            TtId = 2,
                            TtDescription = "Description of the trip Family",
                            Ttname = "Trip Family"
                        });
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.Car", b =>
                {
                    b.HasBaseType("TravelBookingFrance.DAL.Entities.Product");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PassengerCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.ToTable("Produit");

                    b.HasDiscriminator().HasValue("Car");

                    b.HasData(
                        new
                        {
                            ProdId = 3,
                            ProdDescription = "Car Description",
                            ProdName = "BMW",
                            Brand = "Brand Name",
                            Model = "Model Name",
                            PassengerCapacity = 5,
                            Year = 2022
                        },
                        new
                        {
                            ProdId = 4,
                            ProdDescription = "Car Description",
                            ProdName = "Range Rover",
                            Brand = "Brand Name",
                            Model = "Model Name",
                            PassengerCapacity = 5,
                            Year = 2022
                        });
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.Hotel", b =>
                {
                    b.HasBaseType("TravelBookingFrance.DAL.Entities.Product");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPetFriendly")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stars")
                        .HasColumnType("INTEGER");

                    b.ToTable("Produit");

                    b.HasDiscriminator().HasValue("Hotel");

                    b.HasData(
                        new
                        {
                            ProdId = 1,
                            ProdDescription = "Hotel Description",
                            ProdName = "Golden Tulip",
                            Address = "Hotel1 Address",
                            IsPetFriendly = true,
                            Stars = 5
                        },
                        new
                        {
                            ProdId = 2,
                            ProdDescription = "Hotel Description",
                            ProdName = "Movenpick",
                            Address = "Hotel2 Address",
                            IsPetFriendly = true,
                            Stars = 5
                        });
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.Photo", b =>
                {
                    b.HasOne("TravelBookingFrance.DAL.Entities.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.TActivity", b =>
                {
                    b.HasOne("TravelBookingFrance.DAL.Entities.Activite", "Activite")
                        .WithMany("TravelActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelBookingFrance.DAL.Entities.Travel", "Travel")
                        .WithMany("TActivities")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activite");

                    b.Navigation("Travel");
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.Travel", b =>
                {
                    b.HasOne("TravelBookingFrance.DAL.Entities.Customer", "Customer")
                        .WithMany("Travels")
                        .HasForeignKey("CustomerId");

                    b.HasOne("TravelBookingFrance.DAL.Entities.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId");

                    b.HasOne("TravelBookingFrance.DAL.Entities.TripType", "TripType")
                        .WithMany("Travels")
                        .HasForeignKey("TripTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Flight");

                    b.Navigation("TripType");
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.TravelProduct", b =>
                {
                    b.HasOne("TravelBookingFrance.DAL.Entities.Product", "Product")
                        .WithMany("TravelProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelBookingFrance.DAL.Entities.Travel", "Travel")
                        .WithMany("TravelProducts")
                        .HasForeignKey("TravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Travel");
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.Activite", b =>
                {
                    b.Navigation("TravelActivities");
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.Customer", b =>
                {
                    b.Navigation("Travels");
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.Product", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("TravelProducts");
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.Travel", b =>
                {
                    b.Navigation("TActivities");

                    b.Navigation("TravelProducts");
                });

            modelBuilder.Entity("TravelBookingFrance.DAL.Entities.TripType", b =>
                {
                    b.Navigation("Travels");
                });
#pragma warning restore 612, 618
        }
    }
}
